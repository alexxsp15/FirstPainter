from PyQt6.QtGui import QPainter, QPainterPath, QIcon, QPixmap, QPen, QColor
from PyQt6.QtCore import Qt


def paint_button(txt):
    pix = QPixmap(24, 24)
    pix.fill(Qt.GlobalColor.transparent)

    painter = QPainter(pix)
    pen = QPen(QColor.fromString("#cccccc"), 2)
    pen.setCapStyle(Qt.PenCapStyle.RoundCap)
    painter.setPen(pen)

    if txt == "line":
        painter.drawLine(5, 5, 19, 19)
    elif txt == "curve":
        painter.drawArc(3, 7, 16, 16, 0 * 16, 180 * 16)
    elif txt == "circle":
        painter.drawEllipse(3, 3, 19, 19)
    elif txt == "roundedrect":
        painter.drawRoundedRect(3, 5, 18, 15, 4, 4)
    elif txt == "rightarrow":
        path = QPainterPath()
        path.moveTo(20, 12)
        path.lineTo(12, 22)
        path.lineTo(12, 16)
        path.lineTo(3, 16)
        path.lineTo(3, 7)
        path.lineTo(12, 7)
        path.lineTo(12, 2)
        path.lineTo(20, 12)
        painter.drawPath(path)
    elif txt == "pentagon":
        path = QPainterPath()
        path.moveTo(12, 2)
        path.lineTo(22, 9)
        path.lineTo(17, 22)
        path.lineTo(7, 22)
        path.lineTo(2, 9)
        path.lineTo(12, 2)
        painter.drawPath(path)
    elif txt == "leftarrow":
        path = QPainterPath()
        path.moveTo(4, 12)
        path.lineTo(12, 22)
        path.lineTo(12, 16)
        path.lineTo(21, 16)
        path.lineTo(21, 7)
        path.lineTo(12, 7)
        path.lineTo(12, 2)
        path.lineTo(4, 12)
        painter.drawPath(path)
    elif txt == "uparrow":
        path = QPainterPath()
        path.moveTo(12, 2)
        path.lineTo(22, 11)
        path.lineTo(16, 11)
        path.lineTo(16, 22)
        path.lineTo(8, 22)
        path.lineTo(8, 11)
        path.lineTo(2, 11)
        path.lineTo(12, 2)
        painter.drawPath(path)
    elif txt == "downarrow":
        path = QPainterPath()
        path.moveTo(12, 22)
        path.lineTo(22, 13)
        path.lineTo(16, 13)
        path.lineTo(16, 2)
        path.lineTo(8, 2)
        path.lineTo(8, 13)
        path.lineTo(2, 13)
        path.lineTo(12, 22)
        painter.drawPath(path)
    elif txt == "triangle":
        path = QPainterPath()
        path.moveTo(12, 2)
        path.lineTo(22, 22)
        path.lineTo(2, 22)
        path.lineTo(12, 2)
        painter.drawPath(path)
    elif txt == "diamond":
        path = QPainterPath()
        path.moveTo(2, 18)
        path.lineTo(17, 18)
        path.lineTo(22, 2)
        path.lineTo(7, 2)
        path.lineTo(2, 18)
        painter.drawPath(path)
    elif txt == "rect":
        painter.drawRect(3, 5, 18, 15)
    elif txt == "ellipse":
        painter.drawEllipse(2, 5, 19, 14)
    elif txt == "cloud":
        path = QPainterPath()
        path.moveTo(7, 22)
        path.lineTo(20, 22)
        path.arcTo(14, 14, 8, 8, 0, 100)
        path.arcTo(8, 8, 9, 9, 0, 180)
        path.arcTo(2, 14, 8, 8, 100, 200)
        painter.drawPath(path)
    elif txt == "drop":
        path = QPainterPath()
        path.moveTo(12, 2)
        path.lineTo(6, 14)
        path.arcTo(6, 11, 12, 12, 180, 190)
        path.lineTo(12, 2)
        painter.drawPath(path)
    elif txt == "star":
        path = QPainterPath()
        path.moveTo(12, 2)
        path.lineTo(15, 9)
        path.lineTo(22, 9)
        path.lineTo(17, 14)
        path.lineTo(19, 21)
        path.lineTo(12, 17)
        path.lineTo(5, 21)
        path.lineTo(7, 14)
        path.lineTo(2, 9)
        path.lineTo(9, 9)
        path.closeSubpath()
        painter.drawPath(path)
    elif txt == "heart":
        path = QPainterPath()
        path.moveTo(22, 5)
        path.arcTo(13, 1, 10, 10, 0, 180)
        path.arcTo(2, 1, 10, 10, 0, 180)
        path.lineTo(12, 22)
        path.lineTo(23, 7)
        painter.drawPath(path)
    elif txt == "lightning":
        path = QPainterPath()
        path.moveTo(7, 2)
        path.lineTo(17, 2)
        path.lineTo(11, 13)
        path.lineTo(15, 13)
        path.lineTo(7, 22)
        path.lineTo(9, 14)
        path.lineTo(5, 14)
        path.closeSubpath()
        painter.drawPath(path)
    painter.end()
    return QIcon(pix)